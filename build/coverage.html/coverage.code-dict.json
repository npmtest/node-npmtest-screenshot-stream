{"/home/travis/build/npmtest/node-npmtest-screenshot-stream/test.js":"/* istanbul instrument in package npmtest_screenshot_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-screenshot-stream/lib.npmtest_screenshot_stream.js":"/* istanbul instrument in package npmtest_screenshot_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_screenshot_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_screenshot_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-screenshot-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-screenshot-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_screenshot_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_screenshot_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_screenshot_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_screenshot_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_screenshot_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_screenshot_stream.__dirname + '/lib.npmtest_screenshot_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-screenshot-stream/node_modules/screenshot-stream/index.js":"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst urlMod = require('url');\nconst base64Stream = require('base64-stream');\nconst parseCookiePhantomjs = require('parse-cookie-phantomjs');\nconst phantomBridge = require('phantom-bridge');\nconst byline = require('byline');\n\nconst handleCookies = (cookies, url) => {\n\tconst parsedUrl = urlMod.parse(url);\n\n\treturn (cookies || []).map(x => {\n\t\tconst ret = typeof x === 'string' ? parseCookiePhantomjs(x) : x;\n\n\t\tif (!ret.domain) {\n\t\t\tret.domain = parsedUrl.hostname;\n\t\t}\n\n\t\tif (!ret.path) {\n\t\t\tret.path = parsedUrl.path;\n\t\t}\n\n\t\treturn ret;\n\t});\n};\n\nmodule.exports = (url, size, opts) => {\n\topts = Object.assign({\n\t\tdelay: 0,\n\t\tscale: 1,\n\t\tformat: 'png'\n\t}, opts);\n\n\tconst args = Object.assign(opts, {\n\t\turl,\n\t\twidth: size.split(/x/i)[0] * opts.scale,\n\t\theight: size.split(/x/i)[1] * opts.scale,\n\t\tcookies: handleCookies(opts.cookies, url),\n\t\tformat: opts.format === 'jpg' ? 'jpeg' : opts.format,\n\t\tcss: /\\.css$/.test(opts.css) ? fs.readFileSync(opts.css, 'utf8') : opts.css,\n\t\tscript: /\\.js$/.test(opts.script) ? fs.readFileSync(opts.script, 'utf8') : opts.script\n\t});\n\n\tconst cp = phantomBridge(path.join(__dirname, 'stream.js'), [\n\t\t'--ignore-ssl-errors=true',\n\t\t'--local-to-remote-url-access=true',\n\t\t'--ssl-protocol=any',\n\t\tJSON.stringify(args)\n\t]);\n\n\tconst stream = base64Stream.decode();\n\n\tprocess.stderr.setMaxListeners(0);\n\n\tcp.stderr.setEncoding('utf8');\n\tcp.stdout.pipe(stream);\n\n\tbyline(cp.stderr).on('data', data => {\n\t\tdata = data.trim();\n\n\t\tif (/ phantomjs\\[/.test(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (/http:\\/\\/requirejs.org\\/docs\\/errors.html#mismatch/.test(data)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (/^WARN: /.test(data)) {\n\t\t\tstream.emit('warning', data.replace(/^WARN: /, ''));\n\t\t\tstream.emit('warn', data.replace(/^WARN: /, '')); // TODO: deprecate this event in v5\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.length > 0) {\n\t\t\tconst err = new Error(data);\n\t\t\terr.noStack = true;\n\t\t\tcp.stdout.unpipe(stream);\n\t\t\tstream.emit('error', err);\n\t\t}\n\t});\n\n\treturn stream;\n};\n","/home/travis/build/npmtest/node-npmtest-screenshot-stream/node_modules/screenshot-stream/stream.js":"/* global phantom, document, window, btoa */\n'use strict';\nvar system = require('system');\nvar page = require('webpage').create();\nvar objectAssign = require('object-assign');\n\nvar opts = JSON.parse(system.args[1]);\nvar log = console.log;\n\nfunction formatTrace(trace) {\n\tvar src = trace.file || trace.sourceURL;\n\tvar fn = (trace.function ? ' in function ' + trace.function : '');\n\treturn ' → ' + src + ' on line ' + trace.line + fn;\n}\n\nconsole.log = console.error = function () {\n\tsystem.stderr.writeLine([].slice.call(arguments).join(' '));\n};\n\nif (opts.username && opts.password) {\n\topts.headers = objectAssign({}, opts.headers, {\n\t\tAuthorization: 'Basic ' + btoa(opts.username + ':' + opts.password)\n\t});\n}\n\nif (opts.userAgent) {\n\tpage.settings.userAgent = opts.userAgent;\n}\n\npage.settings.resourceTimeout = (opts.timeout || 60) * 1000;\n\nphantom.cookies = opts.cookies;\n\nphantom.onError = function (err, trace) {\n\terr = err.replace(/\\n/g, '');\n\tconsole.error('PHANTOM ERROR: ' + err + formatTrace(trace[0]));\n\tphantom.exit(1);\n};\n\npage.onError = function (err, trace) {\n\terr = err.replace(/\\n/g, '');\n\tconsole.error('WARN: ' + err + formatTrace(trace[0]));\n};\n\npage.onResourceError = function (resourceError) {\n\tconsole.error('WARN: Unable to load resource #' + resourceError.id + ' (' + resourceError.errorString + ') → ' + resourceError.url);\n};\n\npage.onResourceTimeout = function (resourceTimeout) {\n\tconsole.error('Resource timed out #' + resourceTimeout.id + ' (' + resourceTimeout.errorString + ') → ' + resourceTimeout.url);\n\tphantom.exit(1);\n};\n\npage.viewportSize = {\n\twidth: opts.width,\n\theight: opts.height\n};\n\npage.customHeaders = opts.headers || {};\npage.zoomFactor = opts.scale;\n\npage.open(opts.url, function (status) {\n\tif (status === 'fail') {\n\t\tconsole.error('Couldn\\'t load url: ' + opts.url);\n\t\tphantom.exit(1);\n\t\treturn;\n\t}\n\n\tif (opts.crop) {\n\t\tpage.clipRect = {\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\twidth: opts.width,\n\t\t\theight: opts.height\n\t\t};\n\t}\n\n\tpage.evaluate(function (css) {\n\t\tvar bgColor = window\n\t\t\t.getComputedStyle(document.body)\n\t\t\t.getPropertyValue('background-color');\n\n\t\tif (!bgColor || bgColor === 'rgba(0, 0, 0, 0)') {\n\t\t\tdocument.body.style.backgroundColor = 'white';\n\t\t}\n\n\t\tif (css) {\n\t\t\tvar el = document.createElement('style');\n\t\t\tel.appendChild(document.createTextNode(css));\n\t\t\tdocument.head.appendChild(el);\n\t\t}\n\t}, opts.css);\n\n\twindow.setTimeout(function () {\n\t\tif (opts.hide) {\n\t\t\tpage.evaluate(function (els) {\n\t\t\t\tels.forEach(function (el) {\n\t\t\t\t\t[].forEach.call(document.querySelectorAll(el), function (e) {\n\t\t\t\t\t\te.style.visibility = 'hidden';\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}, opts.hide);\n\t\t}\n\n\t\tif (opts.selector) {\n\t\t\tvar clipRect = page.evaluate(function (el) {\n\t\t\t\treturn document\n\t\t\t\t\t.querySelector(el)\n\t\t\t\t\t.getBoundingClientRect();\n\t\t\t}, opts.selector);\n\n\t\t\tclipRect.height *= page.zoomFactor;\n\t\t\tclipRect.width *= page.zoomFactor;\n\t\t\tclipRect.top *= page.zoomFactor;\n\t\t\tclipRect.left *= page.zoomFactor;\n\n\t\t\tpage.clipRect = clipRect;\n\t\t}\n\n\t\tif (opts.script) {\n\t\t\tpage.evaluateJavaScript('function () { ' + opts.script + '}');\n\t\t}\n\n\t\tlog.call(console, page.renderBase64(opts.format));\n\t\tphantom.exit();\n\t}, opts.delay * 1000);\n});\n"}